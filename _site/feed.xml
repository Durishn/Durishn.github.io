<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>The slightly personal, slightly professional site of Nic Durish - Check out my portfolio, resume, or read some of my blogs!</description>
    <link>http://localhost:4000</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Let's Talk: About #BellLetsTalk</title>
        <description>&lt;p&gt;The BellLetsTalk campaign is an initiative to raise awareness and end stigma surrounding Canadian’s Mental Health. Largely the ad campaign (yes, it’s an ad campaign, if it was purely an outreach initiative their name wouldn’t be in the title) encourages individuals to use social media platforms such as Twitter, Facebook, Instagram and Snapchat to share posts with their campaign hashtag. Since the advent of the campaign in 2010, I shared their hashtag almost every year, and even felt ‘proud’ of my contribution to a cause that I stand behind 100% - because let’s face it, stigma around mental health is inarguably damaging to our society. All this being said, the campaign is starting to leave a bad taste in my mouth.&lt;/p&gt;

&lt;h3 id=&quot;lets-talk-about---pr--pseudo-astroturfing&quot;&gt;Let’s Talk about - PR &amp;amp; Pseudo-Astroturfing&lt;/h3&gt;
&lt;p&gt;Astroturfing is the process of masking the sponsor of a message to make it appear as though it is supported by or supports a grassroots movement. By this definition, is BellLetsTalk a form of astroturfing? No. However the implications are the same, the movement presents itself as being in full support of a grassroots movement, and downplays their economic/financial benefits. In short, this might be one of the most powerful (and potentially insidious) ad campaigns I’ve seen from an organization in the last few years. That’s a bold claim, let’s explore it a bit more.&lt;/p&gt;

&lt;h3 id=&quot;lets-talk-about---cost-per-click-advertising&quot;&gt;Let’s Talk about - Cost Per Click Advertising&lt;/h3&gt;
&lt;p&gt;Bell isn’t dumb, there is a reason that they are Canadas largest telecom. They know the importance of advertising, and one of the biggest ways of advertising now a days is through social platforms. Facebook charges $0.72 per click (CPC) for advertisers on their platform &lt;sup&gt;&lt;a href=&quot;#ref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. This heuristic of clicks does not guarantee user engagement, and doesn’t continue the spread of the message. I’d argue that PER SHARE is far, far more valuable than per click, and Bell doesn’t even incentivize likes, just shares. On top of this, Bell gets tax breaks for their donation, meaning they likely spend even less than $0.05 per share (and we won’t even go into the fact that many people are likely using their Bell data to do so). In short, we might collectively be giving Canadas largest telecom a 93% discount on their advertising. Jason Magder of the Montreal Gazette said it quite well, “It’s one thing to give a bunch of money to help improve mental health. And it’s quite another to try to benefit from free advertising at the same time.” The obvious argument is “But hey, at least that money is going to charities!”. First off, while we know which charities that money goes to, it is not shared which departments or projects it directly supports. But, this argument is a long rabbit hole to go down - my best advice is to look up some of the negative implications of astroturfing, as they can be subtle, but over time detrimental to the cause. These next few points are really what drives this point home for me.&lt;/p&gt;

&lt;h3 id=&quot;lets-talk-about---a-corporate-image-inconsistent-with-their-practises&quot;&gt;Let’s Talk about - A corporate image inconsistent with their practises&lt;/h3&gt;
&lt;p&gt;I don’t mind supporting businesses, particularly ones that I believe are transparent in their practices and have a net benefit on our society. So does Bell believe in their message? It might seem that way, but talk to most individuals who have worked in a Bell sales office or call centre - it’s a dog eat dog world, and support systems and considerations to mental health are lacking. When CBC launched their investigation on Bell in 2017, over 600 individuals voluntarily called-in to describe the irony of the campaign &lt;sup&gt;&lt;a href=&quot;#ref2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. As it turns out, crying before your shift, taking stress leave, and being consistently pressured by sales management seems to be a common occurrence at Bell. Maria McLean, the Grand River radio host claims that she was even fired within an hour of bringing her boss a doctors note stating she needed two weeks off work for mental health reasons &lt;sup&gt;&lt;a href=&quot;#ref3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.
As a short side note - I don’t even know whether Bell is going about spreading Mental Health awareness properly. Check out the &lt;a href=&quot;https://letstalk.bell.ca/en/ways-to-help&quot;&gt;this site&lt;/a&gt;. Each picture they use seems to be upper-middle class, white individuals… Mental Health knows no bounds and affects us all. Last time I checked, there is a far wider demographic of Canadians than these images show. But hey, I’m sure their PR/Marketing team did their research on what increased public engagement. Bell sure talks the talk, but the jury’s still out on whether it walks the walk.&lt;/p&gt;

&lt;h3 id=&quot;lets-talk-about---bad-business-practices-in-general&quot;&gt;Let’s Talk about - Bad business practices in general&lt;/h3&gt;
&lt;p&gt;Let’s keep this section short and to the point - cause hell, I could go on forever. Bell exploits one of the worlds most underdeveloped wireless markets in the world in order to price-gouge Canadians. To put that into perspective, individuals in India pay on average 70 times less than Canadians per Mbps &lt;sup&gt;&lt;a href=&quot;#ref4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;. Bell has consistently been campaigning to the Government of Canada to censor access to websites because of torrenting &lt;sup&gt;&lt;a href=&quot;#ref5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;. Bell has historically been systematically deterring any competition from the country, and been protected whilst doing so &lt;sup&gt;&lt;a href=&quot;#ref6&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;. Bell has been campaigning to NAFTA to ban Virtual Private Networks (VPNs) from Canada, because, hell, who needs privacy &lt;sup&gt;&lt;a href=&quot;#ref7&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;. Bell contributes to a massive Digital Divide in our nation where remote and often marginalized communities suffer from inequitable, dismally slow, unstable and expensive access to telecommunications. The CRTC announced in the last few years its plan for Broadband Internet and Telecommunications to be a fundamental human right - so why in the hell are we allowing such an oligopoly to oversee its distribution.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bell already monopolizes internet, they don’t need to monopolize the conversation around Mental Health.&lt;/strong&gt; Instead of sharing the hashtag and contributing $0.05 to a charity and a hell of a lot more to the advertising costs of a 9 Billion Dollar corporation. Skip the middle man - share #LetsTalk and donate to a local charity that supports Mental Health. I chose to donate $25 to the Canadian Mental Health Association of Waterloo Wellington.&lt;/p&gt;

&lt;p&gt;Let’s Talk about building environments where individuals can safely discuss Mental Health.&lt;br /&gt;
Let’s Talk about how having Mental Health issues does not make you ‘weak’, and end the stigmas associated with it.&lt;br /&gt;
Let’s Talk about suicide prevention. &lt;br /&gt;
Let’s Talk about holding businesses accountable for responsibly dealing with individuals with Mental Health issues. &lt;br /&gt;
Let’s Talk about investing in Mental Health professionals and research initiatives.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let’s Talk about Mental Health, not about Bell&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;ref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; - https://blog.adstage.io/adstages-q3-2018-paid-media-benchmark-report?fbclid=IwAR3UctqGna4wYeYRik9V_LWFkGV4H9QgY6LA54eusyS6IaP-CdZk3cx7Osw&lt;br /&gt;
&lt;a name=&quot;ref2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; - https://www.cbc.ca/news/health/bell-employees-stressed-by-sales-targets-1.4418876?fbclid=IwAR3ZaXMDPWEb7Y3sNCdxwmY1B_DmJoWAYovQzhkiG4ug7QOm6PndoEnRFPo&lt;br /&gt;
&lt;a name=&quot;ref3&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; - https://www.cbc.ca/news/canada/new-brunswick/bell-media-host-mental-health-1.3950097?fbclid=IwAR0_64ygkTdLRgqXJ3_WtvsAANZHnrqINu61SA40BGDtgYXjGmpYPO5ED50&lt;br /&gt;
&lt;a name=&quot;ref4&quot;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; - https://mobilesyrup.com/2019/01/22/canada-mobile-data-use-low-revenue-per-gigabyte-high-tefficient-report/?fbclid=IwAR3Cj1kH2aTCMNoFc6c5YG-AVZTzPCFgC8780ztZ06bJv_u1C-YCQdHk6kU&lt;br /&gt;
&lt;a name=&quot;ref5&quot;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; - https://www.huffingtonpost.ca/laura-tribe/internet-piracy-website-blocking-proposal-protest_a_23372670/?fbclid=IwAR1pF_9mwPfb6TPz98EnkBMCOflBB8Ar7wrB_pDvz3OCJCcj029uq3hjWUI&lt;br /&gt;
&lt;a name=&quot;ref6&quot;&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt; - https://business.financialpost.com/telecom/tight-reins-leaves-our-telecom-sector-open-to-criticism-but-sadly-not-competition?fbclid=IwAR3ksxe9_fL7DxYCwupq6KMbmDbcG4WORrCK7qENMufa1xW7PKNn_tdtQW0&lt;br /&gt;
&lt;a name=&quot;ref7&quot;&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt; - https://motherboard.vice.com/en_us/article/d3mvam/canadian-telecom-giant-bell-wanted-nafta-to-ban-some-vpns?fbclid=IwAR0DGP9AWTEXR_LmgMM8Eb6Q60NoMmKAbxtIhCSdLaG7ughZe9-xXnvoo1Q&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Jan 2019 00:00:00 -0500</pubDate>
        <link>http://localhost:4000//19-01-30/p1.html</link>
        <guid isPermaLink="true">http://localhost:4000//19-01-30/p1.html</guid>
      </item>
    
      <item>
        <title>What It Feels Like To Attend A Refreshingly Well-Run Conference</title>
        <description>&lt;p&gt;I’ve always had an excitable, yet tentative outlook on academic conferences. Most conferences that I’ve attended over the past year and a half of my Masters in CompSci have represented (as they should) an opportunity to think outside of the box, to understand how other researchers are solving problems, to network with like-minded individuals and to share research which could have a positive impact on the respective field. After attending a conference that has met these goals, I consistently end up leaving with, what I like to call, an after-conference glow, that leaves me feeling re-energized in my research; more curious, more productive, more insightful, and more willing to work and share with other researchers. For those of you that have experienced this academic bliss, you know that it’s a feeling worth striving for. That being said, not all conferences that I’ve been to, have impacted me in this way which is why I try to be prepared and excited for conferences, but never too expectant.&lt;/p&gt;

&lt;p&gt;That is exactly what was going through my mind as my advisor Dr. Dan Gillis and I loaded our bags onto our flight towards the People, Places and Public Engagement Conference in St. Johns in October of 2018. The focus of the conference was on exploring how universities and the public, including communities, governments, industry, not-for-profits, and others, collaborate, and work together. We had applied to speak at the conference months earlier, through the recommendation of one of our research partners who noted that it might be a good opportunity to share our research and network with individuals who were doing work related to Public Engagement in the region. Without delving too much into our own research project (for more info visit: enuk.eco), we are in the process of building an environment and health monitoring application, built with a mesh network for the remote, indigenous community of Rigolet in Nunatsiavut. While Dan and I are more involved on the ‘technical’ side, the project lies at the intersection of a multitude of fields, including; Computer Science, Public Health, Environmental Sciences, Public Engagement, Indigenous Studies and many more. While having experts in each of these fields is a necessity, it’s also necessary to identify a common means of communication within the team, and to work to understand how Computer Science fits within each of these domains in the context of our project. After identifying the conference as a good fit, and receiving our acceptance to present, we were able to garner enough funding through PSEER to cover my 5 days in St. Johns.&lt;/p&gt;

&lt;p&gt;We arrived at our hotel with just enough time to unpack our bags and head up to Memorial Universities new building on Signal Hill for the ‘Welcome Social’ event. As we joined the queue for registration, I began to take in my surroundings, noting evidence which might support my hopes that this was indeed going to be one of the good ones. The building was fairly small; with one large conference room, a number of smaller meeting rooms, and an atrium that was full of smiles, deep conversation, a local band, and the aroma of local and traditional delicacies. By the end of the evening, Dan and I began walking back to our Hotel; our bellies satisfied, our heads full of excitement for the upcoming presentations, and pockets full of business cards and numbers from other researchers and our faces strained from smiling. It was going to be one of the good ones.&lt;/p&gt;

&lt;p&gt;We arrived at the conference centre by 9:30 AM on Thursday Morning, just in time to grab some coffee, meet with our community research partner Inez Shiwak and chat with some individuals we met the previous night, before the plenary panel began. Ted Hewitt, Sara Woods, and Kevin Morgan began the conference by setting the stage for the next couple of days, identifying the importance of public engagement, discussing the role of communities, businesses, and academic institutions and addressing the many challenges. To my surprise, this plenary, the closing presentations and a couple luncheon plenaries would be the only presentations we attended in the larger conference hall throughout the week. The next 48 hours was a non-stop race against time, it was clear that the conversations that were to happen within these walls was of grave importance to our research and to the livelihoods of Canadians, and every passing moment was an opportunity to learn from someone new. Inez, Dan and I even opted to split up for a few of the workshops, taking notes and reconvening to share what we had learned. I decided that, while every presentation was valuable, I was going to focus on Arctic, Inuit, Community-based engagement, as well as projects that included some technical aspects, which I then narrowed down to the following presentations and workshops:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Advancing Public Engagement in Canada&lt;/li&gt;
  &lt;li&gt;Transforming University-Indigenous Relationships for Reconciliation&lt;/li&gt;
  &lt;li&gt;Creating Meaningful Curricular Learning Experiences with Public Engagement&lt;/li&gt;
  &lt;li&gt;Engagement and Network Leadership for Arctic Development&lt;/li&gt;
  &lt;li&gt;Right in the Middle of Somewhere: Public Engagement in Northern and Remote Regions&lt;/li&gt;
  &lt;li&gt;Engaging the Public Through Citizen Science&lt;/li&gt;
  &lt;li&gt;Closing Plenary - President Natan Obed, Inuit Tapiriit Kanatami (ITK)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dan, Inez and I each present in separate workshops, on different aspects of our project. Dan discussed “How Community Engaged Computer Science Can Change The World”, Inez explored the importance of Community Leadership in the design and implementation of the eNuk App and I explored “How Bridging the Digital Divide can Improve Community-Based Monitoring Programs in the Circumpolar North”. Within each of these sessions, we had a brief presentation before the room erupted into questions and discussions. Questions varied from supportive, such as “Could this research easily be extended to other communities, to more critical (yet incredibly important) questions such as “Have you considered the potential negative impacts of bringing high-speed internet to remote communities”. But this balance was exactly what we needed and exactly what we got; critical insight from a variety of parties on the best way of approaching Public Engagement. This balance of criticisms and support from active and diverse attendees was a theme that persisted through the entire conference. Each presentation involved active participation from the audience and presenters in the discussion of the importance of public engagement, community-engaged learning and scholarship, and our role in addressing the many challenges currently faced in society. Natan Obed, president of the ITK, summed up the week perfectly with his closing statement; “We have determined that it must end with us. Now, we must follow through on the actions we have agreed to undertake together and make them a priority in every aspect of our work and our lives.”&lt;/p&gt;

&lt;p&gt;While I could ramble on about the PPP, and there are some key takeaways that have stuck with me since leaving St. Johns;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The benefit of a conference can be described as the sum of passion and knowledge it provided to its attendees, not its cost, location or the fame of its presenters.&lt;/li&gt;
  &lt;li&gt;If you’re asking “How do I get community members involved in my research”, you’re too late, they need to be involved in the design and planning of the research as well.&lt;/li&gt;
  &lt;li&gt;Don’t be defensive of your research&lt;/li&gt;
  &lt;li&gt;Practise a healthy amount of skepticism&lt;/li&gt;
  &lt;li&gt;Go to conferences and most importantly&lt;/li&gt;
  &lt;li&gt;There are many types of knowledge, and each one deserves to be equally recognized.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 26 Oct 2018 00:00:00 -0400</pubDate>
        <link>http://localhost:4000//18-10-26/p1.html</link>
        <guid isPermaLink="true">http://localhost:4000//18-10-26/p1.html</guid>
      </item>
    
      <item>
        <title>'The Humble Programmer' by Edsger Dijsktra</title>
        <description>&lt;p&gt;It would be modest to call Edsger W. Dijkstra (May 1930 - August 2002) simply a programmer, computer scientist or software engineer. Dijkstra was; the father of structured programming, a visionary and a pioneer in computer science. Many of his teachings and ideologies are considered fundamental, and have had a lasting affect on software design for the last half a century. On August 14th, 1972, Dijkstra presented a brief, yet timeless lecture at the ACM Annual Conference in Boston, entitled The Humble Programmer. Within this talk, Dijkstra analyzes and criticizes the modern (at least in 1972) approaches to programming, development, and language design. His writing is intuitive enough to be understandable to any reader and yet perceptive enough to continuously provide novel meanings after each reread. Dijkstra artfully and implicitly states the necessary conditions for his…&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“Vision that, well before the seventies have run to completion, we shall be able to design and implement the kind of systems that are now straining our programming ability at the expense of only a few percent in man-years of what they cost us now, and that besides that, these systems will be virtually free of bugs”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Unfortunately, Edsger W. Dijkstra’s vision never came to fruition. On the contrary, 46 years later, the software crisis is arguably more cancerous than previously described, if not due to worse design practises than at least due to increased reliance on software systems. As we continue to struggle to refine our systems and design practises, we have started to put more weight on the arguments made in The Humble Programmer. Entire industries, markets, careers and textbooks (including principles such as KISS, Agile, and Test-Driven Development) have been created in an effort to actualize Dijkstra’s vision. However, for the purposes of this exploration of the text, instead in jumping off of a bridge in an attempt to dissect what I can only describe as one of Computer Science’s few spiritual texts, I’ll discuss a single sentence which aptly describes our short-comings in the design of programming languages, both in the seventies and today;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“Another lesson we should have learned from the recent past is that development of ‘richer’ or ‘more powerful’ programming languages was a mistake in the sense that these baroque monstrosities, these conglomerations of idiosyncrasies, are really unmanageable both mechanically and mentally.”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This sentence prefaces Dijkstra’s argument that languages were beginning to be produced that programmers couldn’t intellectually handle. Which inevitably causes a programmer to “concentrate on the vagaries of the programming language and distracts him [or her] from the complexity of the problem”. But does Dijkstra’s argument hold weight? Were languages already starting to balloon and overcomplicate the problems they were attempting to solve? How does adding features and complexity to a language diminish it’s productivity? In what way do these problems translate to contemporary languages? And most importantly how do we finally learn the lesson that Dijkstra describes in the above quote, so that we can end the software crisis once and for all.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“[T]hese conglomerations of idiosyncrasies, are really unmanageable both mechanically and mentally.”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To understand why Edsger W. Dijkstra’s believed that programming languages may have become unmanageable, it’s first necessary to build a brief foundation; what is the point and purpose of a programming language? While there are a variety of programming languages with a wide range of features and specifications, languages in general are meant to serve as a means of efficient communication between humans and computers. Computers use a series of boolean bits as an instruction set for logical operations, equations, data storage and more. While that may seem complicated, it is orders of magnitude more difficult to parse the series of ambiguous, emotional and illogical grunts and noises than make up human language. But until the day that we can teach machines to understand our language (or at least they can teach us to fluently speak theirs), we will have to settle for designing and maintaining languages to act as the middle ground. Inhabiting this delicate region however is a task in and of itself. Languages need to find a balance between including too few and too many features, then implement them properly. While, again, this topic deserves an entire paper itself, in its place a brief parable will have to suffice.&lt;/p&gt;

&lt;p&gt;If programming is indeed a craft, as opposed to an art or a science (perhaps a controversial view, but for the sake of argument), than language is simply a crafters tools. Consider two carpenters attempting to build an intricate piece of furniture; the first owns only a hammer and the second an entire warehouse with thousands of tools each of its own specific task. Abraham Maslow described exactly what might happen in the first situation within his 1966 publication, The Psychology of Science; “if all you have is a hammer, everything looks like a nail”. In short, because his tools aren’t appropriate for the job, you can expect a crude solution, tortured into working properly. On the other hand, the second carpenter is sure to have either forgotten how to use his tools properly, mixed up appropriate tools or died of fatigue in search of his tools and their documentation. Programming languages must focus both on the quality and the quantity of their features and specifications. As Dijkstra states later in The Humble Programmer, “the tools we are trying to use and the language or notation we are using to express or record our thoughts arc the major factors determining what we can think or express at all”. Similarly, the quality of our languages affects the quality of our software, too many features, abstractions, structures, et cetera truly are unmanageable both for computer systems and their programmers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“[L]esson[s] we should have learned from the recent past”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Dijkstra’s statement in The Humble Programmer shows that he believed that a ballooning of language complexity was already beginning to occur. Relative to modern languages it’s easy to scoff at Dijkstra’s outlook, this was of course prior to the internet and technological revolution. But in retrospect, this statement may have occurred at right about the time that language complexities were starting to spiral out of control. Remember, this ACM conference was occurring less than two decades after the release of the first compiler, FORTRAN, LISP, ALGOL 58, COBOL, and less than a decade after the release of Simula, Speakeasy, BASIC, B, and Pascal. In the late 60’s and early 70’s programming languages and paradigms started to flower. Object-Oriented programming began to be developed in Speakeasy and Simula, the general-purpose imperative language C was about to be released, Prolog introduced the first logic programming language and ML built a polymorphic type system. And while these are all significant advances in the Computer Science field, they introduced new problems.&lt;/p&gt;

&lt;p&gt;Initially almost any update of a language was unequivocally considered an improvement, however specifications for new languages were becoming too complex for developers, and compilers were wrought with bugs. Many of these languages released faulty updates in an attempt to create more productive languages within their domain. COBOL’s gravitation towards human-readability for businesses led many programmers to migrate back to symbol based languages, and Lisps introduction of the first garbage-collector, as well as functional and procedural paradigms felt cumbersome for its time. Language designers were being heralded as the messiahs of computer science, and their over-confidence led to the creation of tools, features and specifications that simply couldn’t be intuitively built or maintained. I’m inclined to believe that Dijkstra was being purposefully exaggerative within his quote, in an attempt to scare the programming world into avoiding building bad languages that would inevitably be the foundation for bad software.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“‘richer’ or ‘more powerful’ [contemporary] programming languages”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately the momentum of software complexity has continued to build to this day. While a mere 3.6 MB of code brought the Apollo 11 to the moon &lt;sup&gt;&lt;a href=&quot;#foot1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; (which is now publicly available on GitHub courtesy of Chris Garry), the newest Mac operating system was nearly 15 GB in size. Where legacy software often resembled a perfectly assembled jigsaw puzzle, modern software is akin to taking a piece from multiple puzzles and forcing them together. The multitude and complexity of programming languages, their features, libraries, and lack of maintenance and documentation has exacerbated this problem. Consider the timeline of the C-Family of programming languages. Initially called BCPL, it was introduced in 1966 as a procedural, imperative, and structured computer programming language with constructs that mapped efficiently to typical machine instructions. BCPL evolved into B which introduced recursion, machine independence and non-numeric data, then updated and rereleased in 1969 as C. As described earlier these changes were (for the most part) unequivocally were considered improvements. However the same cannot be said for the changes to C since then. While C itself has only undergone modest changes (thank goodness), it has since branched into a plethora of derivatives such as; Ratfor, AWK, C++, AMPL, PROMAL, Objective-C, C*, Perl, Telescript, Java, S-Lang, Oak, Split-C, Agora, Amiga E, R, SAC, Pike Cilk, Claire, Alef, Limbo, PHP, LPC, Handel-C, Charm, C—, CINT, C#, Ch, D, Cyclone, Falcon, Nemerle, eC, Neko, BitC, NCS, GO, Lite-C, OpenCL, Noop, Axum, Dart, S. AHHHHHHHH. Thankfully, for the sake of your time and my own, we’ll simply look at the complexity of one of C’s most popular derivates; C++.&lt;/p&gt;

&lt;p&gt;C++ is one of the richest programming languages currently available, it has almost any control structure, data structure, operator and feature available in some way or another to the user. Advocates of the language believe this is a feature, that users should understand each feature they are using prior to using it. I have two counterpoints to this; 1) There are many things a programmer doesn’t know they don’t know, they can’t understand something if they don’t know there is something to understand. 2) The language itself is still too vast to understand all of the features and complexities that it holds. Bjarne Stroupstrup, the creator and developer of C++ has said himself “Even I can’t answer every question about C++ without reference to supporting material (e.g. my own books, online documentation, or the standard). I’m sure that if I tried to keep all of that information in my head, I’d become a worse programmer. What I do have is a far less detailed – arguably higher level – model of C++ in my head”&lt;sup&gt;&lt;a href=&quot;#foot2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. This is the most notable reason to the slow phasing out of C++; it’s complexities are unsafe for the unaware and unproductive for the rest of us.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In 1972 Edsger Dijkstra commented on the detrimental nature of unmanageable and complex ‘rich’ programming languages within his ACM presentation The Humble Programmer. His observations were sound in the seventies, however, the momentum of language complexity has yet to falter. The breadth and multitude of languages, documentation, and features available today only reinforces Dijkstra’s fears. Rich and General-purpose languages such as C++ and Java have started to balloon to an unmanageable size. If we aren’t able to realize Dijkstra’s vision of simple and manageable language development, we will be building a foundation for unmanageable software systems in the future and consequently contributing to the software crisis (which will inevitably collapse with size). As similar as Computer Science is to carpentry, people tend to be more courteous of the learning how to operate a dangerous power tool than they do of operating a dangerous language. Perhaps if the flaws in our languages cut off limbs, we would finally be truly critical of the languages that construct our digital systems.  &lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;a name=&quot;fnote1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; https://github.com/chrislgarry/Apollo-11&lt;br /&gt;
&lt;a name=&quot;fnote1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; http://www.stroustrup.com/japanese2010.pdf&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Mar 2018 00:00:00 -0500</pubDate>
        <link>http://localhost:4000//18-03-01/p1.html</link>
        <guid isPermaLink="true">http://localhost:4000//18-03-01/p1.html</guid>
      </item>
    
      <item>
        <title>Exploring the Needs of a Community-Based Monitoring System in Rigolet, Nunatsiavut</title>
        <description>&lt;p&gt;Much like my first trip in November, I arrived at the airport at 6:30 in Goose Bay, and sleepily loaded my bags and self into the 19-seater Twin Otter airplane&lt;sup&gt;1&lt;/sup&gt;, headed to Rigolet, Labrador. Unlike my trip in August, however, the skies were dark, the air was cold, my bag was packed with Halloween costumes and candy, and most importantly, I knew where in the world I was going, both figuratively and literally.&lt;/p&gt;

&lt;!--more--&gt;
&lt;figure class=&quot;post-img-fig&quot; style=&quot;float:left; width:60%&quot;&gt;
  &lt;img class=&quot;post-img&quot; src=&quot;../img/posts/17-11-29-i0.png&quot; alt=&quot;Rigolet, Nunatsiavut in the Autumn&quot; /&gt;
  &lt;figcaption class=&quot;post-img-cap&quot;&gt;Rigolet, Nunatsiavut in the Autumn&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;If you don’t know already, our small multidisciplinary team is working closely with the community of Rigolet, to design, develop and distribute a community-led health and environmental monitoring application called &lt;a href=&quot;https://enuk.eco&quot;&gt;eNuk&lt;/a&gt;. Designed with and by the community of Rigolet, eNuk allows community members to geospatially and categorically track changes in land, environment, and wellbeing that are relevant to them. Users will be able to track thoughts, feelings, photos, videos, audio, and comments, effectively crowd-sourcing their traditional knowledge and stories. Data may be used to; improve safety and efficiency of land use, adapt to climate changes, understand significant environmental and health influences, and provide timely health intervention. To overcome the lack of cellular and poor internet connection in Rigolet, we’ve partnered with Dr Jason Ernst and the &lt;a href=&quot;https://www.rightmesh.io/&quot;&gt;RightMesh&lt;/a&gt; team, to integrate a mobile ad-hoc mesh network within the application and community. Though the project has been in the works for a few years now, its scope has been consistently expanding as we continue to better understand the niche that the application is attempting to fill. Specifically, the introduction of the mesh network into the application proposes a plethora of new potential features, and of course, problems. That being said, though our timeline has been extended, the goal of the project is more clear and dazzling than ever before.&lt;/p&gt;

&lt;figure class=&quot;post-img-fig&quot; style=&quot;float:right; width:40%&quot;&gt;
  &lt;img class=&quot;post-img&quot; src=&quot;../img/posts/17-11-29-i1.png&quot; alt=&quot;Exploring the boardwalk - 2017&quot; /&gt;
  &lt;figcaption class=&quot;post-img-cap&quot;&gt;Exploring the boardwalk - 2017&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;So where do I fit into the picture, and what brought me to this 19-seater plane? Each team member is involved in almost every step of design &amp;amp; development, however, my focus is on the interactivity of the application; how do we make eNuk not only functional but interesting, fun, and engaging to users? During my trip in August, I had the opportunity of meeting with the team, introducing myself to community-members, understanding where the project has come so far, and understanding where I fit into the timeline. This time I had a more defined agenda; to solve the following question – What is the best strategy for designing an engagement, or gamification&lt;sup&gt;&lt;a href=&quot;#fnote3&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; piece for eNuk?&lt;/p&gt;

&lt;p&gt;This question is FAR more nuanced than I had ever imagined. The study of gamification, engagement, and UI design are significant in the computer science domain (I’ll save you the explanation, but think ‘badges’, ‘streaks’, ‘points’, ‘competitions’, etc. ). But that’s just the problem, they are studied through the lens of Computer Science; we need to explore this problem from the context of the community. How can we integrate the most successful and renown engagement strategies from Computer Science and properly tailor them to the needs, traditions, and culture of the community members of Rigolet? This is precisely what was going through my head as we landed in Rigolet at 7:35 am on October 31st.&lt;/p&gt;

&lt;p&gt;But first, there were more important matters that needed attending to; Halloween Festivities! What better way to thank the community for welcoming us and leading the research than to suit up in our Research Onesies and do some reverse trick-or-treating. Dan, Jason, Sheri, Jacquie and myself, dressed as a troupe of animals (fictional, extinct, and current), put together what I can only describe as a metric butt tonne of candy bags, and paraded to each house in the community to distribute them.&lt;/p&gt;

&lt;figure class=&quot;post-img-fig&quot; style=&quot;float:left; width:50%&quot;&gt;
  &lt;img class=&quot;post-img&quot; src=&quot;../img/posts/17-11-29-i2.png&quot; alt=&quot;Left to right: Nic, Jason, Jacquie, and a “metric butt tonne of candy”&quot; /&gt;
  &lt;figcaption class=&quot;post-img-cap&quot;&gt;Left to right: Nic, Jason, Jacquie, and a “metric butt tonne of candy”&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Now that the important stuff was out of the way, it was time to get to our research! The next day was spent preparing for our presentation for the Grade 7/8 class at the elementary school and an Open-House for all community members at the new Strathcona building. I had planned on engaging the kids in some computer science related activities, namely building a game using &lt;a href=&quot;https://scratch.mit.edu/&quot;&gt;Scratch&lt;/a&gt;, then playing with some Hardware on the Raspberry Pi or Arduino. We’d then move on to explaining our project, then getting some ideas from them on their favourite forms of engagement within an application and how they might work in the setting of eNuk. However, much like our project, it seems you can’t design something for an audience that you don’t truly understand, and thankfully, my presentation was more led by the kids, than it was by me.&lt;/p&gt;

&lt;p&gt;After meeting the school Principle, Tom, the previous night, he recommended that I instead start the presentation with a brief introduction to myself and my interests, namely, the school bus that I converted into a Tiny Home and travelled the country with a year ago&lt;sup&gt;&lt;a href=&quot;#fnote3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. We then moved onto our discussion about eNuk.&lt;/p&gt;

&lt;figure class=&quot;post-img-fig&quot; style=&quot;float:right; width:50%&quot;&gt;
  &lt;img class=&quot;post-img&quot; src=&quot;../img/posts/17-11-29-i3.png&quot; alt=&quot;Learning from the students at Northern Lights Academy.&quot; /&gt;
  &lt;figcaption class=&quot;post-img-cap&quot;&gt;Learning from the students at Northern Lights Academy.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;This is how I thought it would play out:&lt;/strong&gt; I’d spend most of my time attempting to explain the methods and goals behind eNuk. I’d explain engagement in other applications, such as skill-trees in video games or badges in online education systems, and have them name some examples. Finally, if time permitted, we’d talk about some decent badges that might work in eNuk, like, ‘walk the entire boardwalk’, ‘make a post every-day for a week’, or ‘use eNuk to post a picture’.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is how it actually played out:&lt;/strong&gt; The kids listened more attentively than anyone I’ve presented the project to. Why? Because they understood the benefits that the applications could have in their community! I explained engagement, they responded with forms of engagement that my biases had blinded me from; &lt;em&gt;“So, like Snapchat streaks?”&lt;/em&gt;  Snapchat tracks how many consecutive daily posts a user has made and as it turns out, there is a small competition between pupils in the class, with some pupils posting for over 500 days. When we finally got to potential badge ideas, their imagination truly began to soar. Where I was confined by the lens of Computer Science, they were empowered by their imaginations. They imagined the badges instead as a set of all the things that an individual could do and learn in Rigolet, as a community-passport, for lack of a better term. &lt;em&gt;“Do a Dog Team race!”&lt;/em&gt; said one boy, &lt;em&gt;“Catch a salmon!”&lt;/em&gt; said another, &lt;em&gt;“Go berry picking!”&lt;/em&gt;, &lt;em&gt;“Slide down Dan’s Bank!”&lt;/em&gt;, &lt;em&gt;“Sing a song in Inuktitut!”&lt;/em&gt;, &lt;em&gt;“Learn grass-weaving!”&lt;/em&gt;.  I think it’s safe to say, I left that classroom with more answers, questions, and direction than I had when I walked in.&lt;/p&gt;

&lt;p&gt;Now armed with the ideas and enthusiasm of the Grade 7/8 classroom, the team and I had an Open House to run. Each member set up their respective booths, explaining some section of the project. Initially, the intent of my booth was to gather a few more badge ideas and have participants draw what a given badge might look like. However, as I explained the results of my visit to the school with community members, their eyes lit up with possibilities – this might not only be a way of engaging kids/users in the application but also their traditional knowledge and skills! We started by writing down some of the ideas that the kids in the school had on post-it notes, then we asked participants to write down things that they thought it was important for kids in the community to learn, and the necessary steps to learn that skill.&lt;/p&gt;

&lt;figure class=&quot;post-img-fig&quot; style=&quot;float:left; width:50%&quot;&gt;
  &lt;img class=&quot;post-img&quot; src=&quot;../img/posts/17-11-29-i4.png&quot; alt=&quot;Post-its: the beginning of an eNuk engagement piece, by Rigolet, for Rigolet.&quot; /&gt;
  &lt;figcaption class=&quot;post-img-cap&quot;&gt;Post-its: the beginning of an eNuk engagement piece, by Rigolet, for Rigolet.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Over the course of a couple hours, I ended up with 59 different Rigolet-specific skills in 13 categories such as; &lt;em&gt;Language, Beading, Sewing, Winter Safety, Trapping, Cooking, Hunting, and Tool Making&lt;/em&gt;, to name a few. While obviously not a complete and exclusive list, my badge system was beginning to transform into an educational tree; a curriculum for self-learning of traditional knowledge and skills.&lt;/p&gt;

&lt;p&gt;Throughout this exercise, there was a looming question in my mind. &lt;em&gt;“Is this really feasible? An application can’t know with reasonable accuracy if a user has completed one of these goals!”&lt;/em&gt;. Queue, my saviour – after providing some great post-its, a woman proposed the idea of an individual (or a small handful of people) in the community being associated with each category. That way, people could go to that person to either receive their badge or to learn that skill.&lt;/p&gt;

&lt;p&gt;Suddenly the entire engagement piece was flipped on its head. Instead of simply providing some badges for completing a task that eNuk could recognize, we could provide a resource for users to log their journey in understanding traditional knowledge and skills. A way to visualize and compare what a community-member has accomplished and the many things they still can learn from others.&lt;/p&gt;

&lt;p&gt;There are a few morals to this story, for those of you who don’t like reading between the lines:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Leave your biases at home.&lt;/li&gt;
  &lt;li&gt;For something to be tailored to its audience, it needs to designed BY its audience and not FOR them.&lt;/li&gt;
  &lt;li&gt;Research is better in a onesie.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;fnote1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; or as my Advisor, Dan would call it, ‘a glorified lawn dart’. I’ll never think of an airplane the same way…&lt;br /&gt;
&lt;a name=&quot;fnote2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; if you’ve never heard of gamification, now might be a good time to use that Google-machine.&lt;br /&gt;
&lt;a name=&quot;fnote3&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; but that’s a story for another blog post.&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Nov 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000//17-11-29/p1.html</link>
        <guid isPermaLink="true">http://localhost:4000//17-11-29/p1.html</guid>
      </item>
    
      <item>
        <title>'Good Ideas Through The Looking Glass' by Niklaus Wirth</title>
        <description>&lt;p&gt;A spent a significantly larger portion of my time preparing for this assignment, than I did actually writing it. I read large sections of many of the papers and realized how difficult it was going to be to support my review with valid criticisms without being to subjective. This is especially true when reviewing comments that were made by some of the most renown programmers of our time; Djistra, Holt, Wirth, Hoare &amp;amp; Ritchie. For this reason, instead of formal critique, my paper expands on quote’s by the author that may have been vague, unclear or needed a devil’s advocate (such as myself).&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;“Good ideas, through the looking glass” is a Computer Science paper written by Niklaus Wirth in 2005. Unlike many other popular STEM articles, Wirth didn’t focus on the introduction, benefits or flaws of any specific computer system or paradigm. Instead, Wirth wanted to discuss “an entire potpourri of ideas, listed from the past decades of Computer Science and Computer Technology”. Specifically, he brought his attention to historically unique or novel ideas, and whether or not they withstood the test of time. As Wirth points out, it’s important to “try to learn from the past, be it for the sake of progress, intellectual stimulation, or fun” &lt;a href=&quot;#wirt6&quot;&gt;(Wirth, 2006)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The article is a fantastic read, and brings due credit to many forgotten concepts, though there were some areas where Wirth’s statements are slightly unclear, or exaggerated. Specifically, my review will discuss a single statement from each of the three sections of the article. Within Programming Language Features, I discuss the statement that the equal sign as an assignment was “a notorious example for a bad idea”. In Miscellaneous Techniques I explore the idea that Wizards typically “are obstinate and immortal like devils”. Finally in Computer Architecture, the notion that “the idea of an expression stack proved to be rather questionable”. In no way are these statements wrong, but due to their subjective nature, they deserve to be explored further. My comments should be considered additions to Wirth’s original paper, as opposed to replacements.&lt;/p&gt;

&lt;h1 id=&quot;programming-language-features---the-equal-sign&quot;&gt;Programming Language Features - The Equal Sign&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;“A notorious example for a bad idea was the choice of the equal sign to denote assignment. It goes back to FORTRAN in 1957 and has blindly been copied by armies of language designers. Why is it a bad idea? Because it overthrows a century old tradition to let &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; denote a comparison for equality, a predicate which is either true or false”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Wirth comments that there was a traditional and widely accepted usage of the equal sign that Fortran wrongly changed in 1957, causing mass confusion. While it’s true that Fortran (as well as C, Perl, Python, etc) used the equal sign as an assignment, and the Pascal family (Ada, Eiffel, APL) used it as a comparison &lt;a href=&quot;#germ6&quot;&gt;(Germain, 2006)&lt;/a&gt;. It’s a drastic simplification to imply that the debate over the proper usage of the equal sign began with these languages. The &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; symbol; which is now universally accepted in mathematics for equality was first recorded by Welsh mathematician Robert Recorde in The Whetstone of Witte (Recorde, 1557). Within the book, Recorde explains that his design of the ‘twin lines’ was to avoid the tedious repetition of these words: “is equal to”. He wrote “I will set (as I do often in work use) a pair of parallels, or Gemowe lines, of one length (thus =), because no two things can be more equal” &lt;a href=&quot;#reco7&quot;&gt;(Recorde, 1557)&lt;/a&gt;. While it could be considered a conditional assignment (i.e. “Given that x is equal to y”), based
on the context of the symbol it seems that Recorde originally intended the equal sign to be written as an absolute assignment (i.e. “x is equal to y”).&lt;/p&gt;

&lt;p&gt;However, as quickly as the symbol was invented, it was misinterpreted. Historically this failed to gain significant attention, as generally the context
of an equation implied the intended usage of the equal sign. While it’s true that after the 1800’s the symbol was generally accepted as a conditional,
there was not a universal symbol for assignments, and documents were still full of ‘improper’ uses. The distinction gained attention and significance with the introduction of computation. Consider the following code; other than the run on equation in Line 5, most individuals would understand this equation without a problem, as context distinguishes between assignments and conditions. However, a computer needs to explicitly know the difference, therefore most programming language would not be able to compile this code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;x = 5
y = x + 5 + 2
if (y = x + 7)
	printf(&quot;TRUE&quot;)
y = x + 5 = 10 + 2 = 12&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Wirth also expands his distaste to other symbols, such as incrementing via &lt;code class=&quot;highlighter-rouge&quot;&gt;++&lt;/code&gt;. This, like Right-Associativity was indeed a poor design decision, as it can’t distinguish between statements and expressions. While there’s no saying which usage of the equal symbol is best (it’s subjective!), it’s easy to see that there should be two universally accepted symbols for conditions and absolute assignments that are mutually exclusive.&lt;/p&gt;

&lt;h1 id=&quot;miscellaneous-techniques---wizards&quot;&gt;Miscellaneous Techniques - Wizards&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;“This author’s experiences with wizards were largely unfortunate. He found it impossible to avoid confronting them in text editors. Worst are those wizards that constantly interfere with one’s writing… if at least they could easily be deactivated, but typically they are obstinate and immortal like devils.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Within Wirth’s Miscellaneous Techniques section he touches on the poor implementation of Wizards, implying that generally do more bad than good. He defends that wizards are indeed necessary, but are largely executed improperly. While I don’t disagree that there was and still is very evil software wizards out there, it’s important to give due credit to the good wizards, if you will. A Wizard (also known as Assistant, or Helper) is a help feature of a software package that automates complex tasks based on user-inputs &lt;a href=&quot;#chri6&quot;&gt;(Christensson, 2006)&lt;/a&gt;. Wizards (as opposed to daemons) are processes or features within a program, never a program itself. They are most common when installing new software, as a Setup Assistant. However they are used frequently to automate tasks within software, such as with text-editors; spellchecking, auto-indenting, auto- capitalization, auto-saving etc. More or less any action that occurs without being explicitly told to do so &lt;a href=&quot;#scot1&quot;&gt;(Scott, 2011)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Wirth’s most significant gripe with Wizards, is that they generally cannot be customized and are permanent. However, this is one of the only features that make wizards, well, wizards! If a user needed to initialize or start-up a wizard, it would simply be a separate task or process. It’s important to realize that we’ve been spoiled by the wonders of wizards. Most individuals recognize when wizards aren’t working properly, such as inaccurate autocorrecting, or automatically changing certain strings into symbols. But no longer recognize it’s plentiful benefits; capitalizing, saving, or using the open/closing quotation points when necessary. I agree with Wirth’s sentiments; Wizards that get in the way of the task at hand should be quickly re-evaluated or destroyed. But that isn’t to say that we shouldn’t be forever grateful to all of the work performed be our wizards. I mean, they are called Wizards for a reason! &lt;/p&gt;

&lt;h1 id=&quot;computer-architecture---expression-stacks&quot;&gt;Computer Architecture - Expression Stacks&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;“Still, the idea of an expression stack proved to be rather questionable, particularly after the advent of architectures with register banks in the mid 1960s. Now simplicity of compilation was sacrificed for any gain in execution speed. The stack organization had restricted the use of a scarce resource to a fixed strategy. “&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Wirth’s section describing the timeless yet flawed ideas of computer architecture was incredibly insightful and well written. I had to read it multiple times, looking for a quotation that I could critique, or at least add to. I chose these lines as I felt he potentially overemphasized the questionability of expression stacks as they stood at that point in time.&lt;/p&gt;

&lt;p&gt;F. L. Bauer and E. W. Dijkstra independently proposed the same scheme for the evaluation of arbitrary expressions. When evaluating an expression from left to right, following the priority rules, the last item is the first needed, therefore making a stack. This was a convenient notion at the time, as implementing this strategy into a register bank was straight-forward. This was the introduction of stack computing &lt;a href=&quot;#koop4&quot;&gt;(Koopman, 1994)&lt;/a&gt;. The significant problem with stack machines was their need for a predefined register amount, sometimes wasting precious resources. While the architecture was quite successful for a while, it was quickly replaced after the introduction of register machines.&lt;/p&gt;

&lt;p&gt;Wirth explains these events quite well in his article, and outlines the advantages that architectures with register banks had over expression stacks. However stack machines do have their advantages, and it wouldn’t be doing expressions stacks any justice to not discuss them. Stack machines may have larger operand loads than register machines, but smaller instructions and smaller total object code &lt;a href=&quot;#shan6&quot;&gt;(Shannon, 2006)&lt;/a&gt;. A stack machine’s compact code naturally fits more instructions in cache, and therefore could achieve better cache efficiency, reducing memory costs or permitting faster memory systems for a given cost. Also, what stack machines lacked in performance, they made up for in the efficiency of their compilers. While many of these benefits are overshadowed by the massive performance enhancement provided by register computing, they are not without value. Stack machines are still used today in some research, small hardware and in hybrid machines. Expression stacks served as a novel solution at the time, only retired after better hardware introductions allowed for more dynamic approaches &lt;a href=&quot;#sinn2&quot;&gt;(Sinnathanby 2012)&lt;/a&gt;. I might argue that instead of “expression stacks [being…] rather questionable”, it was the notion that stack machines were the best architecture for our computing that was questionable.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Niklaus Wirth’s article “Good ideas, through the looking glass” was a fantastic piece of literature. He outlined the most significant ideas of computation within the last century, not by their success, but by their novelty and genius. Through his discussion of computer architectures, language features, and miscellaneous techniques, he does his best to provide as much information about each idea, it’s benefits and downfalls, as possible. While I certainly wouldn’t change anything about the article, there were some topics which I felt could have been explored further, and presented differently. His statements about equal signs as assignments, wizards and expressions stacks were informative and quite accurate. However, he seemed to end the sections by defining them as bad, or questionable ideas (if not outright calling them devils). While, again, potentially valid, I believe these ideas deserve a little more credit, and their benefits could have been further explored. Subjectivity aside however, another fantastic article from Niklaus Wirth.&lt;/p&gt;

&lt;h4 id=&quot;references&quot;&gt;References&lt;/h4&gt;
&lt;p&gt;&lt;a name=&quot;chri6&quot;&gt;Christensson, P. (2006). Wizard Definition. Retrieved 2016, Feb 28, from http://techterms.com &lt;/a&gt;&lt;br /&gt;
&lt;a name=&quot;germ6&quot;&gt;Germain, J. (2006). Variable Assignment. Retrieved February 28th, 2016, from http://www.cs.utah.edu/~germain/PPS/Topics/assignment_statement.html&lt;/a&gt;&lt;br /&gt;
&lt;a name=&quot;koop4&quot;&gt;Koopman, P (1994). “A Preliminary Exploration of Optimized Stack Code Generation” (PDF). Journal of Forth applications and Research 6 (3).&lt;/a&gt;&lt;br /&gt;
&lt;a name=&quot;reco7&quot;&gt;Recorde, R. (1557). The Whetstone of Witte. Retrieved February 27th, 2016 from http://www.maa.org/press/periodicals/convergence/mathematical-treasures-robert-recordes- whetstone-of-witte&lt;/a&gt;&lt;br /&gt;
&lt;a name=&quot;scot1&quot;&gt;Scott, B. (2011). Main menu. Retrieved February 29, 2016, from http://designinginterfaces.com/ patterns/wizard/&lt;/a&gt;&lt;br /&gt;
&lt;a name=&quot;shan6&quot;&gt;Shannon, M. Bailey, C (2006). “Global Stack Allocation : Register Allocation for Stack Machines”. Retrieved February 27th, 2016&lt;/a&gt;&lt;br /&gt;
&lt;a name=&quot;sinn2&quot;&gt;Sinnathanby, M. (2012). Stack based vs Register based Virtual Machine Architecture, and the Dalvik VM. Retrieved February 29, 2016, from https://markfaction.wordpress.com/2012/07/15/ stack-based-vs-register-based-virtual-machine-architecture-and-the-dalvik-vm/&lt;/a&gt;&lt;br /&gt;
&lt;a name=&quot;wirt6&quot;&gt;Wirth, N. (2006). Good ideas, through the looking glass [computing history]. Computer, 39(1), 28-39.&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Feb 2016 00:00:00 -0500</pubDate>
        <link>http://localhost:4000//16-02-23/p1.html</link>
        <guid isPermaLink="true">http://localhost:4000//16-02-23/p1.html</guid>
      </item>
    
  </channel>
</rss>